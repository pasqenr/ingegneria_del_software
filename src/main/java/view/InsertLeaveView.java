package view;

import controller.ArticleController;
import model.ArticleModel;
import model.CourierModel;
import model.StoreModel;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class InsertLeaveView extends javax.swing.JFrame {
    private static final int ROW_NUM = 20;
    private List<StoreModel> storesList;
    private List<CourierModel> courierList;
    private DefaultComboBoxModel<String> storesComboBoxModel;
    private DefaultComboBoxModel<String> courierComboBoxModel;

    private enum ColumnPosition {
        ARTICLE_CODE (0);

        private final int columnPosition;
        ColumnPosition(int columnPosition) { this.columnPosition = columnPosition; }
        public int getValue() { return columnPosition; }
    }

    /**
     * Creates new form InsertLeaveView
     */
    public InsertLeaveView() {
        storesList = StoreModel.findAll();
        courierList = CourierModel.findAll();

        initModels();

        initComponents();

        // Center the frame
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension screenSize = toolkit.getScreenSize();
        int x = (screenSize.width - getWidth()) / 2;
        int y = (screenSize.height - getHeight()) / 2;
        setLocation(x, y);
    }

    private void initModels() {
        String[] stores = new String[storesList.size()];

        for (int i = 0; i < storesList.size(); i++) {
            stores[i] = storesList.get(i).getName();
        }

        String[] couriers = new String[courierList.size()];

        for (int i = 0; i < courierList.size(); i++) {
            couriers[i] = courierList.get(i).getName();
        }

        storesComboBoxModel = new DefaultComboBoxModel<>(stores);
        courierComboBoxModel = new DefaultComboBoxModel<>(couriers);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        orderNumberLabel = new javax.swing.JLabel();
        orderNumberTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        articlesTable = new javax.swing.JTable();
        storeNumberLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        courierLabel = new javax.swing.JLabel();
        storeNameComboBox = new javax.swing.JComboBox<>();
        dateTextField = new javax.swing.JTextField();
        courierComboBox = new javax.swing.JComboBox<>();
        insertOrderButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Insert order");

        orderNumberLabel.setText("Order number:");

        articlesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Article code"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(articlesTable);

        storeNumberLabel.setText("Store name:");

        dateLabel.setText("Date:");

        courierLabel.setText("Courier:");

        storeNameComboBox.setModel(storesComboBoxModel);

        courierComboBox.setModel(courierComboBoxModel);

        insertOrderButton.setText("Insert order");
        insertOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertOrderButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(storeNumberLabel)
                                    .addComponent(dateLabel)
                                    .addComponent(courierLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(storeNameComboBox, 0, 152, Short.MAX_VALUE)
                                    .addComponent(dateTextField)
                                    .addComponent(courierComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(insertOrderButton))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(orderNumberLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(orderNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderNumberLabel)
                    .addComponent(orderNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(storeNumberLabel)
                    .addComponent(storeNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateLabel)
                    .addComponent(dateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courierLabel)
                    .addComponent(courierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(insertOrderButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void insertOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertOrderButtonActionPerformed
        String[] articleCodes = fetchColumnsFromTable(ColumnPosition.ARTICLE_CODE);

        if (articleCodes == null) {
            JOptionPane.showMessageDialog(this,
                    "Empty table",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        boolean allCodesStored = checkIsAlreadyStoredArticleCode(articleCodes);

        if (!allCodesStored) {
            JOptionPane.showMessageDialog(this,
                    "Some article codes are not found in the database",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        List<ArticleModel> articles = new ArrayList<>();

        for (String articleCode : articleCodes) {
            articles.add(ArticleModel.find(articleCode));
        }

        // TODO: check the remaining fields and add all to the right table

        JOptionPane.showMessageDialog(this,
                "Good",
                "Good",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_insertOrderButtonActionPerformed

    private String[] fetchColumnsFromTable(InsertLeaveView.ColumnPosition columnPosition) {
        List<String> columnData = new ArrayList<>();

        for (int row = 0; row < ROW_NUM; row++) {
            Object current = articlesTable.getValueAt(row, columnPosition.getValue());

            if (current != null) {
                columnData.add((String) current);
            }
        }

        final int fetchedRowsNumber = columnData.size();

        /*
          If the list is empty then also the table was empty, let's return that to the caller
         */
        if (fetchedRowsNumber == 0) {
            return null;
        }

        String[] stringColumnData = new String[fetchedRowsNumber];

        for (int i = 0; i < fetchedRowsNumber; i++) {
            stringColumnData[i] = columnData.get(i);
        }

        return  stringColumnData;
    }

    private boolean checkIsAlreadyStoredArticleCode(String[] tableCodes) {
        ArticleController articleController = new ArticleController();
        String[] storedCodes = articleController.getArticlesCodes();
        int matchCounter = 0;

        for (String tableCode : tableCodes) {
            for (String storedCode : storedCodes) {
                if (tableCode.equals(storedCode)) { // We have found a code already stored in the database
                    matchCounter++;
                }
            }
        }

        System.err.println("matchCounter: " + matchCounter + ", tableCodes: " + tableCodes);

        return matchCounter == tableCodes.length;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new InsertLeaveView().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable articlesTable;
    private javax.swing.JComboBox<String> courierComboBox;
    private javax.swing.JLabel courierLabel;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JTextField dateTextField;
    private javax.swing.JButton insertOrderButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel orderNumberLabel;
    private javax.swing.JTextField orderNumberTextField;
    private javax.swing.JComboBox<String> storeNameComboBox;
    private javax.swing.JLabel storeNumberLabel;
    // End of variables declaration//GEN-END:variables
}
